import { supabase } from '@/lib/supabase';
import { Platform } from 'react-native';

class StorageService {
  private bucketName = 'clothes-images';

  async uploadImage(uri: string, fileName: string, mimeType?: string): Promise<string> {
    try {
      console.log('üîÑ CLIENT: Starting image upload:', { 
        uri, 
        fileName, 
        mimeType, 
        platform: Platform.OS 
      });
      
      // Validate and determine content type
      const supportedTypes = ['image/jpeg', 'image/png', 'image/webp'];
      const contentType = mimeType || 'image/jpeg';
      
      if (!supportedTypes.includes(contentType)) {
        console.error('‚ùå CLIENT ERROR: Unsupported content type:', contentType);
        throw new Error(`Format d'image non support√©: ${contentType}. Formats accept√©s: JPEG, PNG, WebP.`);
      }
      
      console.log('üì§ CLIENT: Using validated content type:', contentType);

      // Use different upload methods based on platform
      if (Platform.OS === 'web') {
        return await this.uploadImageWeb(uri, fileName, contentType);
      } else {
        // For mobile platforms (iOS/Android), use the Supabase client directly
        return await this.uploadImageMobile(uri, fileName, contentType);
      }

    } catch (error) {
      console.error('‚ùå CLIENT ERROR: Error uploading image:', error);
      throw error;
    }
  }

  // Web-specific upload using fetch
  private async uploadImageWeb(uri: string, fileName: string, contentType: string): Promise<string> {
    try {
      console.log('üåê CLIENT: Using web upload method');
      
      // Convert URI to blob for web
      const response = await fetch(uri);
      const blob = await response.blob();
      
      console.log('üì§ CLIENT: Blob details:', { 
        size: blob.size, 
        type: blob.type,
        expectedType: contentType 
      });
      
      const { data, error } = await supabase.storage
        .from(this.bucketName)
        .upload(fileName, blob, {
          contentType: contentType,
          upsert: true
        });

      if (error) {
        console.error('‚ùå SERVER ERROR: Web upload error:', error);
        throw this.handleStorageError(error);
      }

      console.log('‚úÖ CLIENT: Web upload successful:', data);

      // Get public URL
      const { data: publicUrlData } = supabase.storage
        .from(this.bucketName)
        .getPublicUrl(data.path);

      console.log('üîó CLIENT: Public URL generated:', publicUrlData.publicUrl);
      return publicUrlData.publicUrl;

    } catch (error) {
      console.error('‚ùå CLIENT ERROR: Web upload failed:', error);
      throw error;
    }
  }

  // Mobile-specific upload (iOS/Android)
  private async uploadImageMobile(uri: string, fileName: string, contentType: string): Promise<string> {
    try {
      console.log('üì± CLIENT: Using mobile upload method for platform:', Platform.OS);
      
      // For mobile, we need to convert the URI to a format that Supabase can handle
      let fileData: any;
      
      if (Platform.OS === 'android') {
        // Android-specific handling
        console.log('ü§ñ CLIENT: Android-specific upload handling');
        
        // Use fetch to get the file data as ArrayBuffer for Android
        const response = await fetch(uri);
        if (!response.ok) {
          throw new Error(`Failed to fetch file: ${response.status} ${response.statusText}`);
        }
        
        const arrayBuffer = await response.arrayBuffer();
        fileData = arrayBuffer;
        
        console.log('üì§ CLIENT: Android file data prepared:', { 
          size: arrayBuffer.byteLength,
          type: 'ArrayBuffer'
        });
        
      } else {
        // iOS handling - can use blob
        console.log('üçé CLIENT: iOS-specific upload handling');
        
        const response = await fetch(uri);
        if (!response.ok) {
          throw new Error(`Failed to fetch file: ${response.status} ${response.statusText}`);
        }
        
        const blob = await response.blob();
        fileData = blob;
        
        console.log('üì§ CLIENT: iOS file data prepared:', { 
          size: blob.size,
          type: blob.type || contentType
        });
      }

      // Upload using Supabase client
      const { data, error } = await supabase.storage
        .from(this.bucketName)
        .upload(fileName, fileData, {
          contentType: contentType,
          upsert: true
        });

      if (error) {
        console.error('‚ùå SERVER ERROR: Mobile upload error:', error);
        throw this.handleStorageError(error);
      }

      console.log('‚úÖ CLIENT: Mobile upload successful:', data);

      // Get public URL
      const { data: publicUrlData } = supabase.storage
        .from(this.bucketName)
        .getPublicUrl(data.path);

      console.log('üîó CLIENT: Public URL generated:', publicUrlData.publicUrl);
      return publicUrlData.publicUrl;

    } catch (error) {
      console.error('‚ùå CLIENT ERROR: Mobile upload failed:', error);
      throw error;
    }
  }

  // Centralized error handling for storage errors
  private handleStorageError(error: any): Error {
    console.error('üîç CLIENT: Analyzing storage error:', error);
    
    if (error.message.includes('Bucket not found') || error.message.includes('bucket') || error.message.includes('404')) {
      console.error('‚ùå SERVER ERROR: Bucket not found');
      return new Error(`Le bucket de stockage "${this.bucketName}" n'existe pas dans votre projet Supabase.

üîß SOLUTION MANUELLE REQUISE :
1. Connectez-vous √† votre tableau de bord Supabase : https://supabase.com/dashboard
2. S√©lectionnez votre projet
3. Cliquez sur "Storage" dans le menu de gauche
4. Cliquez sur "New bucket"
5. Nommez le bucket exactement : "${this.bucketName}"
6. Cochez "Public bucket" pour permettre l'acc√®s aux images
7. D√©finissez la limite de taille : 5242880 (5MB)
8. Dans "Allowed MIME types", ajoutez : image/jpeg,image/png,image/webp
9. Cliquez sur "Create bucket"
10. Configurez les politiques RLS (voir README.md section "Storage Setup")
11. R√©essayez d'ajouter votre v√™tement

Une fois le bucket cr√©√© manuellement, l'application fonctionnera correctement.`);
    }
    
    if (error.message.includes('row-level security') || 
        error.message.includes('policy') || 
        error.message.includes('RLS') ||
        error.message.includes('Unauthorized') ||
        error.message.includes('403')) {
      console.error('‚ùå SERVER ERROR: RLS policy violation');
      return new Error(`Erreur d'autorisation : Les politiques de s√©curit√© (RLS) ne sont pas configur√©es correctement.

üîß SOLUTION REQUISE :
1. Allez sur votre tableau de bord Supabase : https://supabase.com/dashboard
2. Naviguez vers Storage ‚Üí ${this.bucketName} ‚Üí Policies
3. Cr√©ez une politique INSERT avec l'expression :
   (bucket_id = '${this.bucketName}'::text AND auth.role() = 'authenticated'::text)
4. Cr√©ez une politique SELECT avec l'expression :
   bucket_id = '${this.bucketName}'::text
5. Cr√©ez une politique DELETE avec l'expression :
   (bucket_id = '${this.bucketName}'::text AND auth.role() = 'authenticated'::text)

Voir le README.md section "Storage Setup" pour les instructions d√©taill√©es.

IMPORTANT: Cette erreur indique que votre bucket existe mais n'a pas les bonnes politiques RLS configur√©es pour permettre aux utilisateurs authentifi√©s de t√©l√©charger des fichiers.`);
    }
    
    if (error.message.includes('Invalid file type') || error.message.includes('file type')) {
      console.error('‚ùå SERVER ERROR: Invalid file type');
      return new Error(`Type de fichier invalide c√¥t√© serveur. Seuls les formats JPEG, PNG et WebP sont accept√©s.`);
    }
    
    if (error.message.includes('File size') || error.message.includes('too large') || error.message.includes('413')) {
      console.error('‚ùå SERVER ERROR: File too large');
      return new Error(`Fichier trop volumineux. La taille maximale autoris√©e est de 5MB.`);
    }
    
    if (error.message.includes('Network request failed') || error.message.includes('network')) {
      console.error('‚ùå SERVER ERROR: Network request failed');
      return new Error(`Erreur de r√©seau lors du t√©l√©chargement. V√©rifiez votre connexion internet et la configuration Supabase.

Si le probl√®me persiste, v√©rifiez que :
1. Votre URL Supabase est correcte dans .env
2. Votre cl√© anonyme Supabase est valide
3. Les politiques RLS sont configur√©es (voir README.md section "Storage Setup")
4. Votre connexion internet est stable

Platform: ${Platform.OS}`);
    }
    
    if (error.message.includes('415')) {
      console.error('‚ùå SERVER ERROR: Unsupported media type');
      return new Error(`Type de m√©dia non support√© par le serveur. Seuls les formats JPEG, PNG et WebP sont accept√©s.`);
    }
    
    // Generic error
    console.error('‚ùå SERVER ERROR: Generic storage error');
    return new Error(`Erreur serveur lors du t√©l√©chargement: ${error.message}

Platform: ${Platform.OS}
Bucket: ${this.bucketName}

Si cette erreur persiste, v√©rifiez :
1. La configuration de votre bucket Supabase
2. Les politiques RLS (voir README.md section "Storage Setup")
3. Votre connexion internet
4. Les logs de votre projet Supabase pour plus de d√©tails`);
  }

  async deleteImage(fileName: string): Promise<void> {
    try {
      console.log('üóëÔ∏è CLIENT: Deleting image:', fileName);
      
      const { error } = await supabase.storage
        .from(this.bucketName)
        .remove([fileName]);

      if (error) {
        console.error('‚ùå SERVER ERROR: Delete error:', error);
        if (error.message.includes('Bucket not found')) {
          throw new Error(`Le bucket de stockage "${this.bucketName}" n'existe pas.`);
        }
        throw error;
      }
      
      console.log('‚úÖ CLIENT: Image deleted successfully');
    } catch (error) {
      console.error('‚ùå CLIENT ERROR: Error deleting image:', error);
      throw error;
    }
  }

  generateFileName(userId: string): string {
    const timestamp = Date.now();
    const random = Math.random().toString(36).substring(7);
    return `${userId}/${timestamp}-${random}.jpg`;
  }

  // Helper method to check if bucket exists
  async checkBucketExists(): Promise<boolean> {
    try {
      console.log('üîç CLIENT: Checking if bucket exists');
      
      const { data: buckets, error } = await supabase.storage.listBuckets();
      
      if (error) {
        console.error('‚ùå CLIENT ERROR: Error listing buckets:', error);
        return false;
      }

      const bucketExists = buckets?.some(bucket => bucket.name === this.bucketName) || false;
      console.log('üìä CLIENT: Bucket exists:', bucketExists);
      
      return bucketExists;
    } catch (error) {
      console.error('‚ùå CLIENT ERROR: Error checking bucket existence:', error);
      return false;
    }
  }

  // Method to validate file before upload
  validateFile(uri: string, mimeType?: string, fileSize?: number): { valid: boolean; error?: string } {
    console.log('üîç CLIENT: Validating file:', { uri, mimeType, fileSize, platform: Platform.OS });
    
    // Check file type
    const supportedTypes = ['image/jpeg', 'image/png', 'image/webp'];
    const contentType = mimeType || 'image/jpeg';
    
    if (!supportedTypes.includes(contentType)) {
      return {
        valid: false,
        error: `Format d'image non support√©: ${contentType}. Formats accept√©s: JPEG, PNG, WebP.`
      };
    }
    
    // Check file size (5MB limit)
    if (fileSize && fileSize > 5 * 1024 * 1024) {
      return {
        valid: false,
        error: 'Fichier trop volumineux. La taille maximale autoris√©e est de 5MB.'
      };
    }
    
    // Check URI format
    if (!uri || uri.trim() === '') {
      return {
        valid: false,
        error: 'URI de fichier invalide.'
      };
    }
    
    console.log('‚úÖ CLIENT: File validation passed');
    return { valid: true };
  }
}

export const storageService = new StorageService();